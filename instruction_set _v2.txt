Compute instruction
1lll jjjj aaaa aaxx

Move instruction
0lll eeex dddd dddd


e = ENABLES
L = LOADS
a = ALU
j = JUMP
x = dont care

ENABLES:

None    000
A High  001
A low   010
B       011
C       100
ram     101
IR high 110

LOADS:
None    000
A High  001
A low   010
B       011
C       100
ram     101



no jump
jump if zero or negative (<= 0)
jump if negative (< 0)
jump if zero (== 0)
jump if not zero and not negative (> 0)
jump if not ng (>= 0)
jump if carry 
jump if not carry
unconditional jump

Remember that instructions take up two bytes when selecting an address to jump to



Assembly language
Move constant ✔️
  LOAD = CONSTANT
Move ✔️
  LOAD = ENABLE
Move identifier 
  LOAD = IDENTIFIER.l
  LOAD = IDENTIFIER.h
Compute ✔️
  LOAD = EXPRESSION
Compute without destination with jump ✔️
  EXPRESSION, JUMP
Unconditional jump ✔️
  JMP
Constant  ✔️
  CONSTANT
Static data ✔️
  IDENTIFIER:
    xxxxx
Origin ✔️
  #origin xxx

LOAD = one of the loadable registers/memory
ENABLE = one of the registers/memory capable of outputting to the bus
JUMP = one of the jumps, like JNE, JGT, JLT, JC, etc
EXPRESSION = one of the expressions the 74181 ALU is capable of doing like A + B, etc.
wrapped in parentheses like (A - B + 1)
CONSTANT = A constant number like 0x55, 85, 0b1010101
Origin = where to offset indentifiers from. There can be multiple of these directives per file
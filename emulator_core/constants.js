const swap = obj => Object.fromEntries(Object.entries(obj).map(a => a.reverse()))


const LOADS = {
  "000": null,
  "001": "AHigh",
  "010": "ALow",
  "011": "B",
  "100": "C",
  "101": "RAM",
};
const ENABLES = {
  "000": null,
  "001": "AHigh",
  "010": "ALow",
  "011": "B",
  "100": "C",
  "101": "RAM",
  "110": "IRHigh",
};



const JUMP_NAMES = {
  "0001":"JLE",
  "0010":"JLT",
  "0011":"JEQ",
  "0100":"JGT",
  "0101":"JGE",
  "0110":"JC",
  "0111":"JNC",
  "1000":"JMP",
  "1001":"JNE"
}
const REVERSED_JUMP_NAMES = swap(JUMP_NAMES);

// selector + logic + carry
const EXPRESSIONS = {
 "100110": "B+C",
 "111110": "B-1",
 "000000": "B+1",
 "011000": "B-C",
 "011010": "B-C-1",
 "000010": "B",
 "111001": "B|C",
 "010110": "C",
 "001100": "B+B"
};

// Generated by https://extendsclass.com/python-to-javascript.html

const SHOULD_JUMP = (jumpBits, negative, zero, carry) => {
  if (jumpBits == REVERSED_JUMP_NAMES["JLE"]) {
    return negative || zero;
  } else {
    if (jumpBits == REVERSED_JUMP_NAMES["JLT"]) {
      return negative && !zero;
    } else {
      if (jumpBits == REVERSED_JUMP_NAMES["JEQ"]) {
        return zero;
      } else {
        if (jumpBits == REVERSED_JUMP_NAMES["JGT"]) {
          return !negative && !zero;
        } else {
          if (jumpBits == REVERSED_JUMP_NAMES["JGE"]) {
            return !negative || zero;
          } else {
            if (jumpBits == REVERSED_JUMP_NAMES["JC"]) {
              return carry;
            } else {
              if (jumpBits == REVERSED_JUMP_NAMES["JNC"]) {
                return !carry;
              } else {
                if (jumpBits == REVERSED_JUMP_NAMES["JMP"]) {
                  return true;
                } else {
                  if (jumpBits == REVERSED_JUMP_NAMES["JNE"]) {
                    return !zero;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return false;
}

module.exports = { ENABLES, LOADS, SHOULD_JUMP, EXPRESSIONS, JUMP_NAMES };
